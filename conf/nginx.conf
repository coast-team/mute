user YOUR_USER;
worker_processes auto;
pid /run/nginx.pid;

events {
  worker_connections 2000;
}

http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  # Fix nginx sending its version number in error pages and Server header
  server_tokens off;

  # No iframes
  add_header X-Frame-Options SAMEORIGIN;

  # We'll supply correct content types, don't let browsers guess
  add_header X-Content-Type-Options nosniff;

  include       nginx.mimetypes.conf;
  default_type  application/octet-stream;

  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;

  # Enable serve statically compressed files
  gzip_static  on;
  # For brotli compression support look at: https://github.com/google/ngx_brotli
  # brotli_static on;

  # Add a Vary: Accept-Encoding header
  gzip_vary on;

  # Expires map
  map $sent_http_content_type $expires {
    default                    off;
    text/html                  max;
    text/css                   1M; # 1 month
    application/javascript     1M;
    application/font-woff      max;
    font/woff2                 max;
    ~image/                    max;
  }

  # Handle WebSocket connection
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  ####### Signaling server (https://github.com/coast-team/sigver)
  server {
    listen [::]:443 ssl ipv6only=off;
    server_name YOUR_SERVER_NAME;
    include nginx.ssl.conf;

    # Split off traffic to Signaling server, and make sure that websockets
    # are managed correctly.
    location / {
      proxy_pass YOUR_PROXY_URL_TO_SIGNALING_SERVER # e.g. http://127.0.0.1:8000
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 1d;
    }
  }

  ####### Bot Storage (https://github.com/coast-team/mute-bot-storage)
  server {
    listen [::]:443 ssl;
    server_name YOUR_SERVER_NAME;
    include nginx.ssl.conf;

    # Split off traffic to NodeJS server, and make sure that websockets
    # are managed correctly.
    location / {
      proxy_pass YOUR_PROXY_URL_TO_BOT_STORAGE;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 1d;
    }
  }

  ####### Authentication Proxy server (https://github.com/coast-team/mute-auth-proxy)
  server {
    listen [::]:443 ssl http2;
    server_name YOUR_SERVER_NAME;
    include nginx.ssl.conf;

    location / {
      proxy_pass YOUR_PROXY_URL_TO_SIGNALING_SERVER # e.g. http://127.0.0.1:8000
    }
  }

  ####### MUTE web app static files
  # Redirect non-HTTPs clients to HTTPS permanently
  # See http://nginx.org/en/docs/http/converting_rewrite_rules.html
  server {
    listen [::]:80 ssl ipv6only=off;
    server_name YOUR_SERVER_NAME;
    return 301 https://YOUR_ADDRESS$request_uri;
  }

  # HTTPS server
  server {
    listen [::]:80 ssl http2;
    server_name YOUR_SERVER_NAME;
    # expires $expires;
    include nginx.ssl.conf;

    root YOUR_PATH_TO_MUTE_STATIC_FILES;
    index index.html;

    location / {
      # First attempt to serve request as file, then
      # as directory, then fall back to displaying a /index.html.
      try_files $uri /index.html;
    }
  }
}
workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_ID' # Run pipeline on Merge Requests
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH' # Run pipeline on 'main' branch

default:
  interruptible: true

stages:
  - build
  - test
  - publish
  - deploy

### Templates
## Runners
#

.runner_inria: &runner_inria
  tags:
    - ci.inria.fr # required to run on shared gitlab.inria.fr runners
.runner_workstation: &runner_workstation
  tags:
    - workstation # local workstation machine that leverages cache
.runner_mutehost: &runner_mutehost
  tags:
    - mutehost # required to deploy

.images: &images
  variables:
    TAG: latest
    MUTE_IMAGE: registry.gitlab.inria.fr/coast-team/mute/mute:${TAG}
    SIGVER_IMAGE: registry.gitlab.inria.fr/coast-team/mute/mute/sigver:${TAG}

### Templates
## Docker
#

.docker_registry_access: &docker_registry_access
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY_IMAGE
  after_script:
    - docker logout $CI_REGISTRY_IMAGE

.docker_deployment: &docker_deployment
  script:
    - docker-compose -p $ENV_NAME -f $COMPOSE_FILE --env-file ${COMPOSE_ENV_FILE:-""} down || true
    - docker-compose pull --include-deps mute
    - docker-compose -p $ENV_NAME -f $COMPOSE_FILE --env-file ${COMPOSE_ENV_FILE:-""} up -d

### Templates
## Cache
#

.make_node_cache: &make_node_cache
  image: docker.io/node:14
  variables:
    FF_USE_FASTZIP: "true"
    ARTIFACT_COMPRESSION_LEVEL: "fast"
    CACHE_COMPRESSION_LEVEL: "fast"
  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - .cache_exists
        - .npm/
        - node_modules/
        - src/assets/jio-latest.js
        - src/assets/rsvp-2.0.4.min.js
      when: on_success
      policy: pull-push
  script:
    - |
      if [  -f .cache_exists ]; then # npm ci --cache .npm --prefer-offline --no-audit
        echo "cache already exists"
      else
        npm ci --cache .npm --prefer-offline --no-audit
        echo > .cache_exists
      fi

.use_node_cache: &use_node_cache
  image: docker.io/node:14-alpine
  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules/
        - src/assets/jio-latest.js
        - src/assets/rsvp-2.0.4.min.js
      when: on_success
      policy: pull
  needs:
    - job: install-dependencies [init]
      optional: true
    - job: install-dependencies [update]
      optional: true

### Stage
## Build
#

install-dependencies [init]:
  stage: build
  <<: [*runner_workstation, *make_node_cache]
  except:
    changes:
      - package-lock.json

install-dependencies [update]:
  stage: build
  <<: [*runner_workstation, *make_node_cache]
  script:
    - npm ci --cache .npm --prefer-offline --no-audit
    - echo > .cache_exists
  only:
    changes:
      - package-lock.json

build-application:
  stage: build
  <<: [*runner_workstation, *use_node_cache]
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
  when: manual

### Stage
## Test
#

karma:
  stage: test
  <<: [*runner_workstation, *use_node_cache]
  image: docker.io/timbru31/node-chrome:14
  except:
    - schedules
  script:
    - npm run karma
  artifacts:
    when: always
    reports:
      junit:
        - karma.xml

.e2e:
  stage: test
  image: docker.io/docker:dind
  except:
    - schedules
  variables:
    DOCKERFILE_PATH: src/e2e/Dockerfile
  script:
    - docker build -f $DOCKERFILE_PATH -t $IMAGE --no-cache . # build image
    - docker run --privileged -d --name $CONTAINER $IMAGE # run image
    - sleep 10
    - docker exec -w /src/mute $CONTAINER /bin/sh start-mute-sigver-containers.sh # run sigver
    - docker exec -w /src/e2e/ $CONTAINER npm run test chromium firefox $SCENARIO true # run test scenario
    - docker cp $CONTAINER:/src/e2e/e2e.xml e2e.xml # copy report from container to host
  artifacts:
    when: always
    reports:
      junit:
        - e2e.xml
  needs: []
  <<: *runner_inria

e2e-full: # whole E2E scenario
  extends: .e2e
  variables:
    IMAGE: ci-full-scenario
    CONTAINER: ci-full-scenario-container
    SCENARIO: fullscenario
  after_script:
    - docker stop $CONTAINER
  when: manual

e2e-online: # two users meet up on the same document and modify its content
  extends: .e2e
  variables: 
    IMAGE: ci-online-scenario
    CONTAINER: ci-online-scenario-container
    SCENARIO: online
  after_script:
    - docker stop $CONTAINER

e2e-offline: # two previously met users are disconnected from the signaling server but can still both modify the document
  extends: .e2e
  variables:
    IMAGE: ci-offline-scenario
    CONTAINER: ci-offline-scenario-container
    SCENARIO: offline
  after_script:
    - docker stop $CONTAINER

e2e-offline-to-online: # the document at the end is a merge of their respective modifications
  extends: .e2e
  variables:
    IMAGE: ci-offline-to-online-scenario
    CONTAINER: ci-offline-to-online-scenario-container
    SCENARIO: offline-to-online
  retry: 2

### Stage
## Publish
#

.build-docker-image:
  image: docker.io/docker:dind # needs > 19.03
  stage: publish
  <<: [ *docker_registry_access, *runner_inria, *images ]
  script:
    - docker-compose build
    - docker push "${MUTE_IMAGE}"
    - docker push "${SIGVER_IMAGE}"

build-latest-docker-image:
  extends: .build-docker-image
  only:
    - main

build-release-docker-image:
  extends: .build-docker-image
  rules:
    - if: $CI_COMMIT_TAG =~ /^v?(\d+(?:\.\d+)*)$/
      when: on_success
  variables:
    TAG: $CI_COMMIT_TAG

### Stage
## Deployment
#

.deploy-to:
  image: docker.io/docker:dind # needs > 19.03
  stage: deploy
  <<: [ *docker_registry_access, *docker_deployment, *runner_mutehost ]
  variables:
    COMPOSE_FILE: docker-compose.yml

deploy-to-production:
  extends: .deploy-to
  needs:
    - job: build-release-docker-image
  rules:
    - if: $CI_COMMIT_TAG =~ /^v?(\d+(?:\.\d+)*)$/ && $CI_DEPLOY_FREEZE == null
      when: on_success
  variables:
    TAG: $CI_COMMIT_TAG
    ENV_NAME: production
    COMPOSE_ENV_FILE: conf/gitlab-ci/production.env
  environment:
    name: production
    url: https://mutehost.loria.fr
  resource_group: production

deploy-to-test:
  extends: .deploy-to
  needs:
    - job: build-latest-docker-image
  only:
    - main
  variables:
    ENV_NAME: test
    COMPOSE_ENV_FILE: conf/gitlab-ci/test.env
  environment:
    name: test/default
    url: https://mutehost.loria.fr:8004
  resource_group: test
